package tegenton.card.json.model;

import java.util.Objects;

/**
 * The Identifiers Data Model describes a list of identifiers associated to a
 * card.
 */
public class IdentifiersJson {
    private String cardKingdomId;
    private String mcmId;
    private String mtgjsonV4Id;
    private String mtgoId;
    private String multiverseId;
    private String scryfallId;
    private String scryfallIllustrationId;
    private String scryfallOracleId;
    private String tcgplayerProductId;

    /**
     * Default constructor for Jackson unmarshalling.
     */
    public IdentifiersJson() {

    }

    IdentifiersJson(final String s) {
        tcgplayerProductId = s;
    }

    /**
     * Set identifiers.
     *
     * @param ckID      Card Kingdom ID
     * @param mcmID     Card Market ID
     * @param v4ID      MTGJSONv4 ID
     * @param mvID      Multiverse ID
     * @param scryID    Scryfall ID
     * @param scryIllID Scryfall Illustration ID
     * @param scryOrID  Scryfall Oracle ID
     * @return This.
     */
    IdentifiersJson setIdentifiers(final String ckID, final String mcmID,
                                   final String v4ID, final String mvID,
                                   final String scryID, final String scryIllID,
                                   final String scryOrID) {
        cardKingdomId = ckID;
        mcmId = mcmID;
        mtgjsonV4Id = v4ID;
        multiverseId = mvID;
        scryfallId = scryID;
        scryfallIllustrationId = scryIllID;
        scryfallOracleId = scryOrID;
        return this;
    }

    /**
     * The Card Kingdom card identifier.
     *
     * @return The Card Kingdom card identifier.
     */
    public String getCardKingdomId() {
        return cardKingdomId;
    }

    /**
     * The Card Market card identifier.
     *
     * @return The Card Market card identifier.
     */
    public String getMcmId() {
        return mcmId;
    }

    /**
     * The universal unique identifier generated by MTGJSON. Each entry is
     * unique. Entries are for MTGJSON v4 uuid generation.
     *
     * @return The universal unique identifier generated by MTGJSON.
     */
    public String getMtgjsonV4Id() {
        return mtgjsonV4Id;
    }

    /**
     * The Magic: The Gathering Online card identifier.
     *
     * @return The Magic: The Gathering Online card identifier.
     */
    public String getMtgoId() {
        return mtgoId;
    }

    /**
     * The Wizards of the Coast card identifier used in conjunction with
     * Gatherer.
     *
     * @return The Wizards of the Coast card identifier used in conjunction with
     * Gatherer.
     */
    public String getMultiverseId() {
        return multiverseId;
    }

    /**
     * The universal unique identifier generated by Scryfall. Note that cards
     * with multiple faces are not unique.
     *
     * @return The universal unique identifier generated by Scryfall.
     */
    public String getScryfallId() {
        return scryfallId;
    }

    /**
     * The unique identifier generated by Scryfall for the card artwork that
     * remains consistent across reprints. Newly spoiled cards may not have this
     * field yet.
     *
     * @return The unique identifier generated by Scryfall for the card artwork
     * that remains consistent across reprints.
     */
    public String getScryfallIllustrationId() {
        return scryfallIllustrationId;
    }

    /**
     * The unique identifier generated by Scryfall for this card's oracle
     * identity. This value is consistent across reprinted card editions, and
     * unique among different cards with the same name (tokens, Unstable
     * variants, etc).
     *
     * @return The unique identifier generated by Scryfall for this card's
     * oracle identity.
     */
    public String getScryfallOracleId() {
        return scryfallOracleId;
    }

    /**
     * The TCGplayer card identifier.
     *
     * @return The TCGplayer card identifier.
     */
    public String getTcgplayerProductId() {
        return tcgplayerProductId;
    }

    /**
     * Compare two IdentifiersJson objects.
     *
     * @param o An object.
     * @return Equality of the product IDs.
     */
    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        final IdentifiersJson that = (IdentifiersJson) o;
        return Objects.equals(cardKingdomId, that.cardKingdomId)
                && Objects.equals(mcmId, that.mcmId) && Objects.equals(
                mtgjsonV4Id, that.mtgjsonV4Id) && Objects.equals(mtgoId,
                that.mtgoId) && Objects.equals(multiverseId, that.multiverseId)
                && Objects.equals(scryfallId, that.scryfallId)
                && Objects.equals(scryfallIllustrationId,
                that.scryfallIllustrationId) && Objects.equals(scryfallOracleId,
                that.scryfallOracleId) && Objects.equals(tcgplayerProductId,
                that.tcgplayerProductId);
    }

    /**
     * Hash collection of identifiers.
     *
     * @return Hash of all IDs.
     */
    @Override
    public int hashCode() {
        return Objects.hash(cardKingdomId, mcmId, mtgjsonV4Id, mtgoId,
                multiverseId, scryfallId, scryfallIllustrationId,
                scryfallOracleId, tcgplayerProductId);
    }
}

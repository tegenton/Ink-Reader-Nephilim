package tegenton.card.json.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Date;
import java.util.Objects;
import java.util.UUID;

/**
 * The Sealed Product Data Model describes a list of properties for a
 * purchase-able product of a Set.
 */
public class SealedProductJson {
    @JsonProperty(required = true)
    private IdentifiersJson identifiers;
    @JsonProperty(required = true)
    private String name;
    @JsonProperty(required = true)
    private PurchaseUrlsJson purchaseUrls;
    @JsonProperty(required = true)
    private Date releaseDate;
    @JsonProperty(required = true)
    private UUID uuid;

    /**
     * Default constructor for unmarshalling.
     */
    public SealedProductJson() {
    }

    SealedProductJson(final String id) {
        this.uuid = UUID.fromString(id);
    }

    /**
     * A list of identifiers associated to a product. See the Identifiers Data
     * Model.
     *
     * @return A list of identifiers associated to a product.
     */
    public IdentifiersJson getIdentifiers() {
        return identifiers;
    }

    /**
     * The name of the product.
     *
     * @return The name of the product.
     */
    public String getName() {
        return name;
    }

    /**
     * Links that navigate to websites where the product can be purchased. See
     * the Purchase Urls Data Model.
     *
     * @return Links that navigate to websites where the product can be
     * purchased.
     */
    public PurchaseUrlsJson getPurchaseUrls() {
        return purchaseUrls;
    }

    /**
     * The release date in ISO 8601 format for the product.
     *
     * @return The release date in ISO 8601 format for the product.
     */
    public Date getReleaseDate() {
        return releaseDate;
    }

    /**
     * The universal unique identifier (v5) generated by MTGJSON. Each entry is
     * unique.
     *
     * @return The universal unique identifier (v5) generated by MTGJSON.
     */
    public UUID getUuid() {
        return uuid;
    }

    /**
     * Compare the UUIDs of two SealedProductJsons.
     *
     * @param o Object to compare to.
     * @return Are the two objects equal?
     */
    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        final SealedProductJson that = (SealedProductJson) o;
        return Objects.equals(uuid, that.uuid);
    }

    /**
     * Hash of this products UUID.
     *
     * @return Hash of this products UUID.
     */
    @Override
    public int hashCode() {
        return Objects.hash(uuid);
    }

    /**
     * The name of the product.
     *
     * @return The name of the product.
     */
    @Override
    public String toString() {
        return name;
    }
}

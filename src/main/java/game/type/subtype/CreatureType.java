package game.type.subtype;

import java.util.Optional;

public enum CreatureType implements Subtype {
    advisor,
    aetherborn,
    ally,
    angel,
    antelope,
    ape,
    archer,
    archon,
    army,
    artificer,
    assassin,
    assemblyWorker("Assembly-Worker"),
    atog,
    aurochs,
    avatar,
    azra,
    badger,
    barbarian,
    basilisk,
    bat,
    bear,
    beast,
    beeble,
    berserker,
    bird,
    blinkmoth,
    boar,
    bringer,
    brushwagg,
    camarid,
    camel,
    caribou,
    carrier,
    cat,
    centaur,
    cephalid,
    chimera,
    citizen,
    cleric,
    cockatrice,
    construct,
    coward,
    crab,
    crocodile,
    cyclops,
    dauthi,
    demigod,
    demon,
    deserter,
    devil,
    dinosaur,
    djinn,
    dog,
    dragon,
    drake,
    dreadnought,
    drone,
    druid,
    dryad,
    dwarf,
    efreet,
    egg,
    elder,
    eldrazi,
    elemental,
    elephant,
    elf,
    elk,
    eye,
    faerie,
    ferret,
    fish,
    flagbearer,
    fox,
    fractal,
    frog,
    fungus,
    gargoyle,
    germ,
    giant,
    gnome,
    goat,
    goblin,
    god,
    golem,
    gorgon,
    graveborn,
    gremlin,
    griffin,
    hag,
    harpy,
    hellion,
    hippo,
    hippogriff,
    homarid,
    homunculus,
    horror,
    horse,
    human,
    hydra,
    hyena,
    illusion,
    imp,
    incarnation,
    inkling,
    insect,
    jackal,
    jellyfish,
    juggernaut,
    kavu,
    kirin,
    kithkin,
    knight,
    kobold,
    kor,
    kraken,
    lamia,
    lammasu,
    leech,
    leviathan,
    lhurgoyf,
    licid,
    lizard,
    manticore,
    masticore,
    mercenary,
    merfolk,
    metathran,
    minion,
    minotaur,
    mole,
    monger,
    mongoose,
    monk,
    monkey,
    moonfolk,
    mouse,
    mutant,
    myr,
    mystic,
    naga,
    nautilus,
    nephilim,
    nightmare,
    nightstalker,
    ninja,
    noble,
    noggle,
    nomad,
    nymph,
    octopus,
    ogre,
    ooze,
    orb,
    orc,
    orgg,
    otter,
    ouphe,
    ox,
    oyster,
    pangolin,
    peasant,
    pegasus,
    pentavite,
    pest,
    phelddagrif,
    phoenix,
    phyrexian,
    pilot,
    pincher,
    pirate,
    plant,
    praetor,
    prism,
    processor,
    rabbit,
    ranger,
    rat,
    rebel,
    reflection,
    rhino,
    rigger,
    rogue,
    sable,
    salamander,
    samurai,
    sand,
    saproling,
    satyr,
    scarecrow,
    scion,
    scorpion,
    scout,
    sculpture,
    serf,
    serpent,
    servo,
    shade,
    shaman,
    shapeshifter,
    shark,
    sheep,
    siren,
    skeleton,
    slith,
    sliver,
    slug,
    snake,
    soldier,
    soltari,
    spawn,
    specter,
    spellshaper,
    sphinx,
    spider,
    spike,
    spirit,
    splinter,
    sponge,
    squid,
    squirrel,
    starfish,
    surrakar,
    survivor,
    tentacle,
    tetravite,
    thalakos,
    thopter,
    thrull,
    treefolk,
    trilobite,
    triskelavite,
    troll,
    turtle,
    unicorn,
    vampire,
    vedalken,
    viashino,
    volver,
    wall,
    warlock,
    warrior,
    weird,
    werewolf,
    whale,
    wizard,
    wolf,
    wolverine,
    wombat,
    worm,
    wraith,
    wurm,
    yeti,
    zombie,
    zubera;

    private final String name;

    CreatureType() {
        this.name = this.name().substring(0, 1).toUpperCase() + this.name().substring(1);
    }

    CreatureType(String s) {
        this.name = s;
    }

    public static Optional<Subtype> fromString(String s) {
        for (CreatureType type : CreatureType.values()) {
            if (type.getName().equalsIgnoreCase(s)) {
                return Optional.of(type);
            }
        }
        return Optional.empty();
    }

    @Override
    public String getName() {
        return name;
    }
}
